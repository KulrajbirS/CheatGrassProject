
```{r}
# Required Libraries
library(mlr3)
library(mlr3fselect)
library(mlr3tuning)
library(mlr3learners)
library(mlr3spatial)
library(mlr3spatiotempcv)
library(mlr3pipelines)
library(mlr3filters)
library(tidyverse)
library(sf)
library(terra, exclude = "resample")
library(janitor)
library(ranger)
library(e1071)
library(raster, exclude = "resample")
```

```{r}
# Set workspace
workspace_dir <- './'

# Set input/output file paths
raw_dir <- file.path(workspace_dir, "01_raw")
clim_dir <- file.path(workspace_dir, "05_climate_tif")
output_dir <- file.path(workspace_dir, "07_terrain_tif")
tif_models_dir <- file.path(workspace_dir, "09_models_tif")
ndvi_path <- list.files(raw_dir, pattern = "new_", full.names = TRUE)
terrain_vars <- list.files(output_dir, pattern = ".tif$", full.names = TRUE) 
clim_vars <- list.files(clim_dir, pattern = ".tif$", full.names = TRUE)
# dem_path <- file.path(output_dir, "dem.tif")
# slope_path <- file.path(output_dir, "slope.tif")
# aspect_path <- file.path(output_dir, "aspect.tif")
# long_curv_path <- file.path(output_dir, "long_curvature.tif")
# plan_curv_path <- file.path(output_dir, "plan_curvature.tif")
# tpi_path <- file.path(output_dir, "tpi.tif")
# tri_path <- file.path(output_dir, "tri.tif")
survey_path <- file.path(workspace_dir, "Survey.csv")
tif_filename = file.path(tif_models_dir, "output_raster.tif")
shp_filename = file.path(tif_models_dir, "output_raster.shp")
infestation_plot_path <- file.path(tif_models_dir, "infestation_level.png")

```

```{r}
# Load NDVI and Field Data
covariates <- rast(c(
  ndvi_path, terrain_vars, clim_vars)) %>% 
  clean_names()

field_points <- read.csv(survey_path, stringsAsFactors = FALSE) %>%
  clean_names() %>%
  rename(cover = x_cover) %>%
  mutate(cover = gsub("<|>", "", cover)) %>% 
  separate_wider_delim(cover, "-", names_sep = "-", too_few = "align_end") %>% 
  rename(cover = last_col()) %>% 
  dplyr::select(northing, westing, cover) %>% 
  mutate(cover = as.numeric(cover)) %>% 
  st_as_sf(coords = c("westing", "northing"), crs = 4326) %>% 
  st_transform(st_crs(covariates))
```

```{r}
# Convert field_points to SpatVector
field_points_vector <- terra::vect(field_points)

# Extract Raster Data for Points
raster_extract <- terra::extract(covariates, field_points_vector, ID = FALSE,
                                 fun = mean, na.rm = TRUE, bind = TRUE) %>%
  st_as_sf() %>%
  na.omit()

```

```{r}
set.seed(123)

task_raw <- as_task_regr_st(raster_extract, target = "cover")
```

Random Forest Regressor

```{r}
# Define the model
lrnr <- lrn("regr.ranger", importance = 'impurity',
            mtry.ratio = to_tune(0.1, 1))

# Define the parameter set
param_set <- ParamSet$new(params = list(
  ParamInt$new("mtry", lower = 1, upper = floor(sqrt(ncol(raster_extract)))),
  ParamInt$new("min.node.size", lower = 1, upper = 100),
  ParamInt$new("num.trees", lower = 100, upper = 1000)
))

# Graphs and pipeops for tuning
po_flt = po("filter", filter = flt("information_gain"), filter.nfeat = to_tune(5, task_raw$ncol))
graph = po_flt %>>% po("learner", lrnr)

at = auto_tuner(
  tuner = tnr("grid_search", resolution = 5),
  learner = graph,
  resampling = rsmp("repeated_spcv_coords", folds = 10, repeats = 3),
  measure = msr("regr.mse"), 
  terminator = trm("none"), store_tuning_instance = TRUE
)

rr <- resample(task_raw, at, rsmp("holdout", ratio = 1), store_models = TRUE)
best_learner <- rr$learners[[1]]$learner
```

Create the map prediction

```{r}

if(file.exists(tif_filename)) unlink(tif_filename)
map_prediction <- predict_spatial(covariates, best_learner, filename = tif_filename)

```

```{r}
# # Read the TIFF file into a raster object
# input_raster <- raster(map_prediction)
# 
# # Open PNG device with adjusted height
# png(filename = infestation_plot_path, width = 1000, height = 1100, units = "px", res = 96)
# 
# # Define breakpoints and labels based on new criteria
# breaks <- c(0, 1, 6, 26, 51, 100)
# labels <- c("Free (0%)",
#             "Trace (1-5%)",
#             "Mild Infestation (6-25%)",
#             "Moderate Infestation (26-50%)",
#             "Cheatgrass Dominated (51-100%)")
# 
# # Create the reclassification matrix dynamically
# reclass_mat <- c(breaks[1], breaks[2], 1,
#                  breaks[2], breaks[3], 2,
#                  breaks[3], breaks[4], 3,
#                  breaks[4], breaks[5], 4,
#                  breaks[5], breaks[6], 5)
# 
# reclassified_raster <- reclassify(input_raster, rcl = matrix(reclass_mat, ncol=3, byrow=TRUE))
# 
# # Define visually appealing colors for each category
# colors <- c("#00BFFF", "#ADFF2F", "#FFD700", "#FF8C00", "#FF0000")
# 
# # Adjusting margins for more space on the right side
# par(mar=c(5,4,4,5)+0.1)  # Increased the right margin to fit the long labels
# 
# # Generate the plot
# plot(reclassified_raster, col=colors, legend=FALSE)
# 
# # Manually add the legend using the breaks and labels
# legend("topright", legend=labels, fill=colors, title="Infestation Level", cex=0.8)
# 
# # Close PNG device
# dev.off()

## from-to-becomes
# classify the values into multiple groups 
m <- data.frame(
  from = c(0, 1, 5, 15, 30, 45),
  to = c(1, 5, 15, 30, 45, 100),
  id = c(0, 1, 2, 3, 4, 5),
  cover = c("Free (0%)",
            "Trace (1-5%)",
            "Light Infestation (5-15%)",
            "Mild Infestation (15-30%)",
            "Moderate Infestation (30-45%)",
            "Cheatgrass Dominated (45-100%)"),
  colors = c("white", "#00BFFF", "#ADFF2F", "#FFD700", "#FF8C00", "#FF0000"))
rclmat <- as.matrix(m[, 1:3])
rcl <- classify(map_prediction, rclmat, include.lowest = TRUE)
coltab(rcl) <- m$colors
levels(rcl) <- m[, 3:4]

rcl <- writeRaster(rcl, file.path(tif_models_dir, "infestation_level.tif"), 
                   overwrite = TRUE)

```


Random forest classifier model (re-inserted from previously)

The code below has been copy/pasted from the predict_spatial() function, and has been customized to provide an output of the probability of cheatgrass being present rather than its classified output. It currently works well with untuned models, and autotuning the models will be critical for getting this working for the rest of it. Works with both random forest (preferred for spatial data) and SVM's.

```{r}

field_points_classif <- field_points |> 
  mutate(presence = as.factor(cover > 0)) |> 
  dplyr::select(-cover)

# Convert field_points to SpatVector
field_points_classif_vector <- terra::vect(field_points_classif)

# Extract Raster Data for Points
raster_extract_classif <- terra::extract(covariates, field_points_classif_vector, ID = FALSE,
                                 fun = mean, na.rm = TRUE, bind = TRUE) %>%
  st_as_sf() %>%
  na.omit()

# Define the model
task_raw_classif <- as_task_classif_st(raster_extract_classif, target = "presence", positive = "TRUE")
lrnr_classif <- lrn("classif.ranger", predict_type = "prob", importance = 'impurity',
            mtry.ratio = to_tune(0.1, 1))

# Graphs and pipeops for tuning
po_flt_classif = po("filter", filter = flt("auc"), 
            filter.nfeat = to_tune(5, task_raw_classif$ncol))
graph_classif = po_flt_classif %>>% po("learner", lrnr_classif)

at_classif = auto_tuner(
  tuner = tnr("grid_search", resolution = 5),
  learner = graph_classif,
  resampling = rsmp("repeated_spcv_coords", folds = 10, repeats = 3),
  measure = msr("classif.ce"), 
  terminator = trm("none"), store_tuning_instance = TRUE
)
rr_classif <- resample(task_raw_classif, at_classif, rsmp("holdout", ratio = 1), store_models = TRUE)
best_learner_classif <- rr_classif$learners[[1]]$learner

# Define function inputs
learner = best_learner_classif
task = as_task_unsupervised(covariates)
filename = tempfile(fileext = ".tif")
stack = task$backend$stack

# Create a spatial learner
learner = switch(learner$task_type, classif = mlr3spatial:::LearnerClassifSpatial$new(learner), 
                 regr = mlr3spatial:::LearnerRegrSpatial$new(learner))

# Define "block" size (i.e.: how large of files to process at once)
bs = block_size(stack, 200L)

# Create an output template raster
target_raster = terra::rast(terra::ext(stack), resolution = terra::res(stack), 
                            crs = terra::crs(stack))
terra::writeStart(target_raster, filename = filename, 
                  overwrite = TRUE, datatype = "FLT8S")

# Use edited function to output probability of presence.
mlr3misc::pmap(list(
  bs$cells_seq, bs$cells_to_read, 
  seq_along(bs$cells_seq)), function(cells_seq, cells_to_read, n) {
    stack = task$backend$stack
    pred = learner$predict(task, row_ids = cells_seq:((cells_seq + 
                                                         cells_to_read - 1)))
    
    # The pred$prob object does not contain rows with NA values, those need
    # to be added in and that can be accomplished by inserting those values
    # into an empty vector at the non-NA positions gleaned from the responses.
    non_na_pos = which(!is.nan(pred$response))
    v = rep(NaN, cells_to_read)
    v[non_na_pos] = pred$prob[, "TRUE"]
    terra::writeValues(x = target_raster, v = v, 
                       start = terra::rowFromCell(stack, cells_seq), 
                       nrows = terra::rowFromCell(stack, cells_to_read))
  })
terra::writeStop(target_raster)

# Move your raster from the tempfile to the desired directory
target_raster <- writeRaster(target_raster, file.path(tif_models_dir, "output_prob.tif"),
                             overwrite = TRUE)

# Create classification bins for the probabilities. Not quite as useful as 
# above, but the format here makes it adjustable if needed.

## from-to-becomes
# classify the values into multiple groups 
m_classif <- data.frame(
  from = c(0, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9),
  to = c(0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
  id = c(0, 1, 2, 3, 4, 5, 6),
  probability = c("<25%",
           "25-50%",
           "50-60%",
           "60-70%",
           "70-80%",
           "80-90%",
           "90-100%"),
  colors = c("white", "#00BFFF", "#ADFF2F", "#FFD700", "#FF8C00", "red1", "darkred"))
rclmat_classif <- as.matrix(m_classif[, 1:3])
rcl_classif <- classify(target_raster, rclmat_classif, include.lowest = TRUE)
coltab(rcl_classif) <- m_classif$colors
levels(rcl_classif) <- m_classif[, 3:4]

rcl_classif <- writeRaster(rcl_classif, file.path(tif_models_dir, "prob_class.tif"), 
                   overwrite = TRUE)

```

