
```{r}
# Required Libraries
library(mlr3)
library(mlr3fselect)
library(mlr3tuning)
library(mlr3learners)
library(mlr3spatial)
library(mlr3spatiotempcv)
library(mlr3pipelines)
library(mlr3filters)
library(tidyverse)
library(sf)
library(terra, exclude = "resample")
library(janitor)
library(ranger)
library(e1071)
library(raster, exclude = "resample")
```

```{r}
# Set workspace
workspace_dir <- './'

# Set input/output file paths
raw_dir <- file.path(workspace_dir, "01_raw")
output_dir <- file.path(workspace_dir, "07_terrain_tif")
tif_models_dir <- file.path(workspace_dir, "09_models_tif")
ndvi_path <- list.files(raw_dir, pattern = "new_", full.names = TRUE)
dem_path <- file.path(output_dir, "dem.tif")
slope_path <- file.path(output_dir, "slope.tif")
aspect_path <- file.path(output_dir, "aspect.tif")
cross_curv_path <- file.path(output_dir, "cross_curvature.tif")
long_curv_path <- file.path(output_dir, "long_curvature.tif")
plan_curv_path <- file.path(output_dir, "plan_curvature.tif")
profile_curv_path <- file.path(output_dir, "profile_curvature.tif")
tpi_path <- file.path(output_dir, "tpi.tif")
tri_path <- file.path(output_dir, "tri.tif")
# twi_path <- file.path(output_dir, "twi.tif")
survey_path <- file.path(workspace_dir, "Survey.csv")
tif_filename = file.path(tif_models_dir, "output_raster.tif")
shp_filename = file.path(tif_models_dir, "output_raster.shp")
infestation_plot_path <- file.path(tif_models_dir, "infestation_level.png")
```

```{r}
# Load NDVI and Field Data
covariates <- rast(c(
  ndvi_path, dem_path, slope_path, aspect_path, long_curv_path, plan_curv_path, tpi_path, tri_path)) %>% 
  clean_names()

field_points <- read.csv(survey_path, stringsAsFactors = FALSE) %>%
  clean_names() %>%
  rename(cover = x_cover) %>%
  mutate(cover = gsub("<|>", "", cover)) %>% 
  separate_wider_delim(cover, "-", names_sep = "-", too_few = "align_end") %>% 
  rename(cover = last_col()) %>% 
  dplyr::select(northing, westing, cover) %>% 
  mutate(cover = as.numeric(cover)) %>% 
  st_as_sf(coords = c("westing", "northing"), crs = 4326) %>% 
  st_transform(3005)
```

```{r}
# Convert field_points to SpatVector
field_points_vector <- terra::vect(field_points)

# Extract Raster Data for Points
raster_extract <- terra::extract(covariates, field_points_vector, ID = FALSE,
                                 fun = mean, na.rm = TRUE, bind = TRUE) %>%
  st_as_sf() %>%
  na.omit()

```

```{r}
set.seed(123)

task_raw <- as_task_regr_st(raster_extract, target = "cover")
```

Random Forest Regressor

```{r}
# Define the model
lrnr <- lrn("regr.ranger", importance = 'impurity',
            mtry.ratio = to_tune(0.1, 1))

# Define the parameter set
param_set <- ParamSet$new(params = list(
  ParamInt$new("mtry", lower = 1, upper = floor(sqrt(ncol(raster_extract)))),
  ParamInt$new("min.node.size", lower = 1, upper = 100),
  ParamInt$new("num.trees", lower = 100, upper = 1000)
))

# Graphs and pipeops for tuning
po_flt = po("filter", filter = flt("importance"), filter.nfeat = to_tune(5, task_raw$ncol))
graph = po("learner", lrnr)


at = auto_tuner(
  tuner = tnr("grid_search", resolution = 5),
  learner = graph,
  resampling = rsmp("repeated_spcv_coords", folds = 10, repeats = 3),
  measure = msr("regr.mse"), 
  terminator = trm("none"), store_tuning_instance = TRUE
)

rr <- resample(task_raw, at, rsmp("holdout", ratio = 1), store_models = TRUE)
best_learner <- rr$learners[[1]]$learner
```

The code below has been copy/pasted from the predict_spatial() function, and has been customized to provide an output of the probability of cheatgrass being present rather than its classified output. It currently works well with untuned models, and autotuning the models will be critical for getting this working for the rest of it. Works with both random forest (preferred for spatial data) and SVM's.

```{r}
# Define function inputs
learner = best_learner
task = as_task_unsupervised(covariates)
filename = tempfile(fileext = ".tif")
stack = task$backend$stack

# Create a spatial learner
learner = switch(learner$task_type, classif = mlr3spatial:::LearnerClassifSpatial$new(learner), 
                 regr = mlr3spatial:::LearnerRegrSpatial$new(learner))

# Define "block" size (i.e.: how large of files to process at once)
bs = block_size(stack, 200L)

# Create an output template raster
target_raster = terra::rast(terra::ext(stack), resolution = terra::res(stack), 
                            crs = terra::crs(stack))
terra::writeStart(target_raster, filename = filename, 
                  overwrite = TRUE, datatype = "FLT8S")

# Use edited function to output probability of presence.
mlr3misc::pmap(list(
  bs$cells_seq, bs$cells_to_read, 
  seq_along(bs$cells_seq)), function(cells_seq, cells_to_read, n) {
    stack = task$backend$stack
    pred = learner$predict(task, row_ids = cells_seq:((cells_seq + 
                                                         cells_to_read - 1)))
    
    # Handle NA values in predictions
    non_na_pos = which(!is.nan(pred$response))
    v = rep(NaN, cells_to_read)
    v[non_na_pos] = pred$response[non_na_pos]
    terra::writeValues(x = target_raster, v = v, 
                       start = terra::rowFromCell(stack, cells_seq), 
                       nrows = terra::rowFromCell(stack, cells_to_read))
  })
terra::writeStop(target_raster)

# Move your raster from the tempfile to the desired directory
file.copy(from = filename, to = tif_filename, overwrite = TRUE)
```

```{r}
# Read the TIFF file into a raster object
input_raster <- raster(tif_filename)

# Open PNG device with adjusted height
png(filename = infestation_plot_path, width = 1000, height = 1100, units = "px", res = 96)

# Normalize the raster values to 0-100 range
normalize_raster <- function(r) {
  r_min <- cellStats(r, stat = 'min')
  r_max <- cellStats(r, stat = 'max')
  return (r - r_min) / (r_max - r_min) * 100
}

normalized_raster <- normalize_raster(input_raster)

# Define breakpoints and labels based on new criteria
breaks <- c(0, 1, 6, 26, 51, 100)
labels <- c("Free (0%)",
            "Trace (1-5%)",
            "Mild Infestation (6-25%)",
            "Moderate Infestation (26-50%)",
            "Cheatgrass Dominated (51-100%)")

# Create the reclassification matrix dynamically
reclass_mat <- c(breaks[1], breaks[2], 1,
                 breaks[2], breaks[3], 2,
                 breaks[3], breaks[4], 3,
                 breaks[4], breaks[5], 4,
                 breaks[5], breaks[6], 5)

reclassified_raster <- reclassify(normalized_raster, rcl = matrix(reclass_mat, ncol=3, byrow=TRUE))

# Define visually appealing colors for each category
colors <- c("#00BFFF", "#ADFF2F", "#FFD700", "#FF8C00", "#FF0000")

# Adjusting margins for more space on the right side
par(mar=c(5,4,4,5)+0.1)  # Increased the right margin to fit the long labels

# Generate the plot
plot(reclassified_raster, col=colors, legend=FALSE)

# Manually add the legend using the breaks and labels
legend("topright", legend=labels, fill=colors, title="Infestation Level", cex=0.8)

# Close PNG device
dev.off()

```
