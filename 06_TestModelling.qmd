
```{r}
# Required Libraries
# library(caret)
library(mlr3)
library(mlr3fselect)
library(mlr3tuning)
library(mlr3learners)
library(mlr3spatial)
library(mlr3spatiotempcv)
library(tidyverse)
library(sf)
library(terra, exclude = "resample")
library(janitor)
library(ranger)
library(e1071)
```

```{r}
# Set workspace
workspace_dir <- './'

# Set input/output file paths
raw_dir <- file.path(workspace_dir, "01_raw")
output_dir <- file.path(workspace_dir, "07_terrain_tif")
ndvi_path <- list.files(raw_dir, pattern = "new_", full.names = TRUE)
dem_path <- file.path(output_dir, "dem.tif")
slope_path <- file.path(output_dir, "slope.tif")
aspect_path <- file.path(output_dir, "aspect.tif")
cross_curv_path <- file.path(output_dir, "cross_curvature.tif")
long_curv_path <- file.path(output_dir, "long_curvature.tif")
plan_curv_path <- file.path(output_dir, "plan_curvature.tif")
profile_curv_path <- file.path(output_dir, "profile_curvature.tif")
tpi_path <- file.path(output_dir, "tpi.tif")
tri_path <- file.path(output_dir, "tri.tif")
twi_path <- file.path(output_dir, "twi.tif")
survey_path <- file.path(workspace_dir, "Survey.csv")
pred_output_path <- file.path(workspace_dir, "09_models_tif/cheatgrass_model_presence_probs.tif")
```

```{r}
# Load NDVI and Field Data
# ndvi <- rast(ndvi_path)
# dem <- rast(dem_path)
# slope <- rast(slope_path)
# aspect <- rast(aspect_path)
# cross_curv <- rast(cross_curv_path)
# long_curv <- rast(long_curv_path)
# plan_curv <- rast(plan_curv_path)
# profile_curv <- rast(profile_curv_path)
# tpi <- rast(tpi_path)
# twi <- rast(twi_path)
# tri <- rast(tri_path)

covariates <- rast(c(
  ndvi_path, dem_path, slope_path, aspect_path, cross_curv_path, long_curv_path,
  plan_curv_path, profile_curv_path, tpi_path, twi_path, tri_path)) %>% 
  clean_names()

field_points <- read.csv(survey_path, stringsAsFactors = FALSE) %>%
  clean_names() %>%
  rename(cover = x_cover) %>%
  mutate(cover = gsub("<|>", "", cover)) %>% 
  separate_wider_delim(cover, "-", names_sep = "-", too_few = "align_end") %>% 
  rename(cover = last_col()) %>% 
  dplyr::select(northing, westing, cover) %>% 
  mutate(cover = as.numeric(cover),
         presence = as.factor(cover > 0)) %>% 
  st_as_sf(coords = c("westing", "northing"), crs = 4326) %>% 
  st_transform(3005)

```

```{r}
# Convert field_points to SpatVector
field_points_vector <- terra::vect(field_points)

# Extract Raster Data for Points
raster_extract <- terra::extract(covariates, field_points_vector, ID = FALSE,
                                 fun = mean, na.rm = TRUE, bind = TRUE) %>%
  st_as_sf() %>%
  na.omit() %>%
  select(-cover)

```

```{r}
# Create a train and test set
# This can be done within mlr3 instead of relying on the caret package
set.seed(123)
# train_index <- createDataPartition(raster_extract$presence, p = .60, list = FALSE)
# train_set <- raster_extract[ train_index,]
# test_set  <- raster_extract[-train_index,]

# Convert 'presence' to factor
# train_set$presence <- as.factor(train_set$presence)
# test_set$presence <- as.factor(test_set$presence)

# Define task
# task <- TaskClassif$new(id = "train", backend = train_set, target = "presence")

task_raw <- as_task_classif_st(raster_extract, target = "presence", positive = "TRUE")

```

Random Forest Classifier

```{r}

# Define the model
lrnr <- lrn("classif.ranger", predict_type = "prob", importance = 'impurity',
            mtry.ratio = to_tune(0.1, 1))

# Define the parameter set
param_set <- ParamSet$new(params = list(
  ParamInt$new("mtry", lower = 1, upper = floor(sqrt(ncol(raster_extract)))),
  ParamFct$new("splitrule", levels = c("gini")),
  ParamInt$new("min.node.size", lower = 1, upper = 100),
  ParamInt$new("num.trees", lower = 100, upper = 1000)
))

# Graphs and pipeops for tuning
po_flt = po("filter", filter = flt("auc"), 
            filter.nfeat = to_tune(5, task$ncol))
graph = po_flt %>>% po("learner", lrnr)

at = auto_tuner(
  tuner = tnr("grid_search", resolution = 5),
  learner = graph,
  resampling = rsmp("repeated_spcv_coords", folds = 10, repeats = 3),
  measure = msr("classif.ce"), 
  terminator = trm("none"), store_tuning_instance = TRUE
)
rr <- resample(task_raw, at, rsmp("holdout", ratio = 1), store_models = TRUE)
best_learner <- rr$learners[[1]]$learner


```

Support Vector Classifier

```{r}
# Define the model with type = 'C-classification'
# lrnr <- lrn("classif.svm", type = "C-classification", kernel = "radial", predict_type = "prob")
# 
# # Define the parameter set
# param_set <- ParamSet$new(params = list(
#   ParamDbl$new("cost", lower = 0.1, upper = 10),
#   ParamDbl$new("gamma", lower = 0.1, upper = 1)
# ))
```

```{r include=FALSE}
# Define the search space
# ss <- param_set

# Set up the tuning
# tuner <- tnr("grid_search")

# Define the tuning instance
# tune_instance <- TuningInstanceSingleCrit$new(
#    task = task_raw,
#    learner = lrnr,
#    resampling = rsmp("repeated_spcv_coords", folds = 3, repeats = 5),
#    measure = msr("classif.ce"),
#    terminator = trm("evals", n_evals = 100),
#    search_space = ss
# )

# Optimize
# tuner$optimize(tune_instance)
```

```{r}
# Get best hyperparameters
# best_params <- tune_instance$result_learner_param_vals

# Set best hyperparameters
# lrnr$param_set$values <- best_params

# Train the learner on the task
# lrnr$train(task_raw)

```

The code below has been copy/pasted from the predict_spatial() function, and has been customized to provide an output of the probability of cheatgrass being present rather than its classified output. It currently works well with untuned models, and autotuning the models will be critical for getting this working for the rest of it. Works with both random forest (preferred for spatial data) and SVM's.

```{r}

# Define function inputs
learner = best_learner
task = as_task_unsupervised(covariates)
filename = tempfile(fileext = ".tif")
stack = task$backend$stack

# Create a spatial learner
learner = switch(learner$task_type, classif = mlr3spatial:::LearnerClassifSpatial$new(learner), 
                 regr = mlr3spatial:::LearnerRegrSpatial$new(learner))

# Define "block" size (i.e.: how large of files to process at once)
bs = block_size(stack, 200L)

# Create an output template raster
target_raster = terra::rast(terra::ext(stack), resolution = terra::res(stack), 
                            crs = terra::crs(stack))
terra::writeStart(target_raster, filename = filename, 
                  overwrite = TRUE, datatype = "FLT8S")

# Use edited function to output probability of presence.
mlr3misc::pmap(list(
  bs$cells_seq, bs$cells_to_read, 
  seq_along(bs$cells_seq)), function(cells_seq, cells_to_read, n) {
    stack = task$backend$stack
    pred = learner$predict(task, row_ids = cells_seq:((cells_seq + 
                                                         cells_to_read - 1)))
    
    # The pred$prob object does not contain rows with NA values, those need
    # to be added in and that can be accomplished by inserting those values
    # into an empty vector at the non-NA positions gleaned from the responses.
    non_na_pos = which(!is.nan(pred$response))
    v = rep(NaN, cells_to_read)
    v[non_na_pos] = pred$prob[, "TRUE"]
    terra::writeValues(x = target_raster, v = v, 
                       start = terra::rowFromCell(stack, cells_seq), 
                       nrows = terra::rowFromCell(stack, cells_to_read))
  })
terra::writeStop(target_raster)

```

```{r}
# Predict on test data
test_task <- TaskClassif$new(id = "test", backend = test_set, target = "presence")
prediction <- learner$predict(test_task)
```

```{r}
# Performance
perf <- prediction$score(msr("classif.ce"))

# Print performance
print(perf)
```

```{r}
# Create a SpatRaster object that includes all rasters
all_rasters <- terra::rast(list(dem, slope, aspect, cross_curv, long_curv, tpi, twi, tri, plan_curv, profile_curv))

# Fill NA values with 0 (or any other value that makes sense in your case)
all_rasters <- terra::ifel(is.na(all_rasters), 0, all_rasters)

# Predict the probability of cheatgrass presence on each raster cell
cheatgrass_prob_raster <- terra::predict(all_rasters, learner)
```

```{r}
# Save the output to a tif file
terra::writeRaster(cheatgrass_prob_raster, filename = pred_output_path, overwrite=TRUE)
```

```{r}
# Plot the probability raster
plot(cheatgrass_prob_raster)
```
